package javapack;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;

//Parser class name: Parser
//Symbols class name: Sym

//Codigo anadido a la clase de las acciones
action code
{:
	private void nuevoIDE(String ide, int fila, int columna){
		boolean yadefinida = false;
		int indiceyaesta = -1;
		for(Simbolo s : sinTipo){
			indiceyaesta++;
			if(s.nombre.equals(ide)){
				yadefinida = true;
				break;
			}
				
		}
		if(!yadefinida){
			if(!parser.ts.esta(ide)){
				Simbolo i = new Simbolo(ide, fila, columna);
				if(!i.tipo.equals("reservada")){
					sinTipo.add(i);
				}
				else
					parser.report_error("(SEMaNTICO) "+ ide+" definido en la linea "+fila+", caracter "+columna+" es una palabra reservada.\n"+parser.fallo(fila,columna), null);
			}else{
				Simbolo s = parser.ts.getSimbolo(ide);
				if(s.tipo.equals("reservada")){
					parser.report_error("(SEMaNTICO) "+ ide+" definido en la linea "+fila+", caracter "+columna+" es una palabra reservada.\n"+parser.fallo(fila,columna), null);
				}else
					parser.report_error("(SEMaNTICO) El ide "+ide+" declarado en la linea "+fila+", caracter "+columna+" ya fue declarado en "+s.filaYColumna()+"\n"+parser.fallo(fila,columna), null);
			}
		}else{
			Simbolo s = sinTipo.get(indiceyaesta);
			parser.report_error("(SEMaNTICO) El ide "+ide+" declarado en "+s.filaYColumna()+" ya fue declarado en la linea "+fila+", caracter "+columna+"\n"+parser.fallo(fila,columna), null);
			
		}
		
	}
	
	
	
	String tipo;
	
	ArrayList<Simbolo> sinTipo = new ArrayList<Simbolo>();
	
	private void ponerTipo(String tipo){
		if(tipo == null)
			tipo = "*ERROR*";
		for(Simbolo s : sinTipo){
			s.tipo = tipo;
			if(tipo.equalsIgnoreCase("integer"))
				s.valor = "0";
			else
				s.valor = "false";
			
			parser.ts.insertar(s);
		}
		sinTipo.clear();
	}
	
	private void newProduccion(String p){
		int c = parser.producciones.size();
		c++;
		parser.producciones.add("Regla #"+c+" --> "+p);
	}
	
:}




parser code
{:
	public TablaSimbolos ts = new TablaSimbolos();
	public Arbol arbol = new Arbol();
	private String path;
	ArrayList<String> errores = new ArrayList<String>();

	public void report_error(String message, Object info) {
		String fallo = message;
		if (info instanceof Symbol)
			if (((Symbol)info).left != -1)
				fallo += " en el caracter " +
					((Symbol)info).left + " del archivo.";
		newError(message);
	}
	
	public void newError(String m){
		int c = errores.size();
		c++;
		errores.add("--> ERROR #"+c+" - "+m);
	}
	
	public void mostrarErrores(){
		System.out.println(
		"-------------------------------------------------------------------------------------------------------------------------------------------------"+
		"\nA continuacion se muestra la lista de errores encontrados:\n");
	
		for(String s : errores){
			System.out.println(s);
		}
		
		System.out.println(
		"-------------------------------------------------------------------------------------------------------------------------------------------------\n"+
		"*************************************************************************************************************************************************\n"+
		"****************************************\tSe ha(n) encontrado un total de "+errores.size()+" errores.\t*************************************************\n"+
		"*************************************************************************************************************************************************");
	}
	
	public Parser (java.io.Reader input) {
    	super(new Scan(input));
  	}
  	
  	public void limpiar(){
  		ts = new TablaSimbolos();
		path = null;
		errores = new ArrayList<String>();
		producciones = new ArrayList<String>();
		System.out.print("\n\n");
  	}
  	
  	public void ponerPath(String path){
  		this.path = path;
  	}
	
	public void syntax_error(Symbol s) {
		if(s.left > 0 && s.right > 0)
	  		report_error("(SINTaCTICO) Error de sintaxis linea " + s.left + ", columna " + s.right+"\n"+fallo(s.left,s.right), null);
	}
	
	public void report_fatal_error(String message, Object info) {
	  done_parsing();
	  report_error("(SINTaCTICO) Error de sintaxis fatal : "
	  + "No se puede recuperar del error y continuar con el analisis - "
	  + message + " ",(Symbol)info);
	  report_error("(SINTaCTICO) ** Final del analisis **", info);
	  mostrarErrores();
	  //System.exit(1);
	}
	
	public ArrayList<String> producciones = new ArrayList<String>();

	
	
	public void imprimirProducciones(){
		System.out.println(
		"-------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("Orden de las producciones gramaticales: \n");
		for(String s : producciones){
			System.out.println(s);
		}
	}
	
	public void finalAnalisis(){
		System.out.println(
		"-------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("Analisis Sintactico completado\n\n"+
							"AST resultado del analisis.");
		System.out.println(arbol.toString()+"\n");
		
		imprimirProducciones();
		
		System.out.println(
		"-------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("Tabla de simbolos\n");
		System.out.println(ts.toString());
		if(!errores.isEmpty())
			mostrarErrores();
			
	}
	
	public String fallo(int linea, int columna) {
		return Compilador.mostrarFallo(path, linea, columna);
	}
	
:}

terminal	tk_asignacion;
terminal	tk_suma, tk_resta, tk_multiplicacion, tk_division, tk_var, tk_true;
terminal	tk_parenizq, tk_parender, tk_coma, tk_puntoycoma, tk_dospuntos;
terminal	tk_false, tk_then, tk_program, tk_is, tk_begin, tk_end, tk_read, tk_integer;
terminal	tk_write, tk_skip, tk_while, tk_do, tk_if, tk_else, tk_and, tk_or, tk_not, tk_boolean;
terminal 	Integer tk_numeroentero;
terminal	Simbolo tk_identificador;
terminal 	String tk_comparacion;

non terminal Nodo PROGRAM;
non terminal Nodo DEFINICIONPROGRAMA;
non terminal Nodo BLOQUEDEFINICIONVARIABLES;
non terminal Nodo DVA;
non terminal Nodo DEFINICIONVARIABLE;
non terminal Nodo LISTAVARIABLES, DECLARACIONTIPO;
non terminal Nodo LVA, BDSA;
non terminal Nodo BLOQUEDESENTENCIAS;
non terminal Nodo DEFINICIONSENTENCIA, AVERQUEASIGNAMOS;
non terminal Nodo LISTAEXPRESIONES;
non terminal Nodo SIGUEEXPRESION;
non terminal Nodo EAA;
non terminal Nodo DEFINICIONIF, DEFINICIONELSE;
non terminal INICIO;
non terminal Nodo IDEOENTERO;
non terminal Nodo OPERADORMATES;
non terminal Nodo EXPRESIONBOOLEANA;
non terminal Nodo COMPARACION;
non terminal Nodo LISTADEASIGNACIONES;



//PRECEDENCIA DE OPERADORES
precedence right tk_or;
precedence right tk_and;
precedence right tk_not;
precedence right tk_comparacion;
precedence right tk_suma, tk_resta;
precedence right tk_multiplicacion, tk_division;


start with INICIO;

INICIO ::=
	PROGRAM:p
		{:			
			/**** (6). Diseno del AST				   ****/
			parser.arbol.raiz = p;
			parser.finalAnalisis();
			
			/**** (3). Diseno del analizdor sintactico ****/
			parser.done_parsing();
			newProduccion("INICIO ::= PROGRAM");
		:}
;

PROGRAM ::=
	tk_program:p tk_identificador:i tk_is:is BLOQUEDEFINICIONVARIABLES:bdv DEFINICIONPROGRAMA:dp
		{:
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("program["+i.nombre+"](["+bdv.valor+"],["+dp.valor+"])");	
			Arbol.unirParientes(RESULT, bdv);
			Arbol.unirHermanos(bdv,dp);
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("PROGRAM ::= tk_program tk_identificador tk_is BLOQUEDEFINICIONVARIABLES DEFINICIONPROGRAMA");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("program",pleft,pright);
			parser.ts.usada("is",isleft,isright);
			
			/**** (4). Diseno del analizdor semantico  ****/
			//Identificadores no reservados, todos los demas definidos a lo largo del programa.
			ArrayList<Simbolo> ides = parser.ts.getIdentificadores();
			//Por cada simbolo de la lista anterior
			for(Simbolo s : ides){
				//Si la variable definida no ha sido usada a lo largo del problema se muestra un mensaje
				//advirtiendo de que no esta siendo usada.
				if(s.usadaEn.isEmpty())
					parser.report_error("(SEMaNTICO) La variable "+s.nombre+" ha sido declarada pero no usada.\n"+parser.fallo(s.fila,s.columna), null);
			}
			//Si en la tabla de simbolos no esta el nombre del programa
			if(!parser.ts.esta(i.nombre)){
				//Lo anadimos a la tabla de simbolos con el tipo "pseudo".
				parser.ts.insertar(new Simbolo(i.nombre, ileft, iright, "pseudo"));
			}else{
				//Si ya estaba antes, se reporta un mensaje de error al usuario.
				parser.report_error("(SEMaNTICO) El nombre del programa ("+i.nombre+") coincide con el de una variable. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
			}
			
		:} 
;

BLOQUEDEFINICIONVARIABLES ::=
	DVA:d
		{:	
			/**** (6). Diseno del AST				   ****/
			if(d == null)
				RESULT = new Nodo("no_decls");
			else
				RESULT = d;
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("BLOQUEDEFINICIONVARIABLES ::= DVA");
		:} 
;
		
DVA ::=
	DEFINICIONVARIABLE:dv DVA:dvaux
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DVA ::= DEFINICIONVARIABLE DVA");
			
			/**** (6). Diseno del AST				   ****/
			if(dvaux == null)
				//Si solo hay una declaracion de variable se muestra.
				RESULT = new Nodo("decl("+dv.valor+")");
			else{
				//Si existe mas de una declaracion se unen como hermanos, puesto que estan en el mismo nivel.
				RESULT = new Nodo("decl("+dv.valor +"),"+ dvaux.valor);
				Arbol.unirHermanos(dv, dvaux);
			}
			//Finalmente, se junta el resultado, el padre, con su hijo, la definicion de variable.
			Arbol.unirParientes(RESULT, dv);
			
		:}
	| /**/
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DVA ::= .");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = null;
		:}	
;

DEFINICIONVARIABLE ::=
	tk_var:v LISTAVARIABLES:lv tk_dospuntos DECLARACIONTIPO:dt tk_puntoycoma
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONVARIABLE ::= tk_var LISTAVARIABLES tk_dospuntos DECLARACIONTIPO tk_puntoycoma");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("var",vleft,vright);
			
			/**** (6). Diseno del AST				   ****/
			//Si existen errores y no se ha podido generar el nodo, lo generamos con un mensaje de error.
			if(lv == null){
				lv = new Nodo("**ERROR_LISTA_VARIABLES**");
			}
			if(dt == null){
				dt = new Nodo("**ERROR_TIPO_VARIABLE**");
			}
			//El nodo resultante, el padre de la declaracion, se une con sus hijos, las variables y el tipo.
			RESULT = new Nodo(dt.valor+",["+lv.valor+"]");
			Arbol.unirHermanos(dt,lv);
			Arbol.unirParientes(RESULT, dt);
			
			/**** (4). Diseno del analizdor semantico  ****/
			//Una vez conocido el tipo de la lista de varibles definidas, se anade a la tabla de simbolos con su tipo.
			ponerTipo(tipo);
		:}
	| 
	error:e
		{:
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("**DEFINICION_VARIABLE_ERRONEA**");
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONVARIABLE ::= error");
			parser.report_error("(SINTaCTICO) Problema en la asignacion de identificadores en la linea "+eleft+", caracter "+eright+"\n"+parser.fallo(eleft,eright), e);
		:}
;

LISTAVARIABLES ::=
	tk_identificador:i LVA:lvaux
		{:
			/**** (6). Diseno del AST				   ****/
			if(lvaux == null){
				RESULT = new Nodo(i.nombre);
			}else{
				RESULT = new Nodo(i.nombre +","+lvaux.valor);
				Arbol.unirHermanos(RESULT, lvaux);
			}
			
			/**** (4). Diseno del analizdor semantico  ****/			
			nuevoIDE(i.nombre, ileft, iright);
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LISTAVARIABLES ::= tk_identificador LVA");
		:}
	| error:e
		{:
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("**LISTA_VARIABLES_ERRONEA**");
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LISTAVARIABLES ::= .");
			parser.report_error("(SINTaCTICO) Se debe finalizar la sentencia con un punto y coma tras el token en la linea "+eleft+", columna "+eright+"\n"+parser.fallo(eleft,eright), e);
			
		:}
;
		
LVA ::=
	tk_coma tk_identificador:i LVA:lvaux
		{:
			/**** (6). Diseno del AST				   ****/
			if(lvaux == null){
				RESULT = new Nodo(i.nombre);
			}else{
				RESULT = new Nodo(i.nombre +","+lvaux.valor);
				Arbol.unirHermanos(RESULT, lvaux);
			}
			
			/**** (4). Diseno del analizdor semantico  ****/				
			nuevoIDE(i.nombre, ileft, iright);
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LVA ::= tk_coma tk_identificador LVA");
		:}
	| /**/
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LVA ::= .");
			
			/**** (6). Diseno del AST				   ****/			
			RESULT = null;
		:}
	| error:e
		{:
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("**LISTA_VARIABLES_ERRONEA**");
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LVA ::= error");
			parser.report_error("(SINTaCTICO) Es necesario una coma para delimitar los identificadores de la linea "+eleft+", columna "+eright+"\n"+parser.fallo(eleft,eright), e);
			
		:}
;

DEFINICIONPROGRAMA ::=
	tk_begin:b BLOQUEDESENTENCIAS:bds tk_end:e
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONPROGRAMA ::= tk_begin BLOQUEDESENTENCIAS tk_end");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo(bds.valor);
			Arbol.unirParientes(RESULT, bds);
			
			/**** (5). Diseno de la tabla de simbolos ****/		
			parser.ts.usada("begin",bleft,bright);
			parser.ts.usada("end",eleft,eright);
		:}
;

DECLARACIONTIPO ::=
	tk_integer:i
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DECLARACIONTIPO ::= tk_integer");
			
			/**** (6). Diseno del AST				   ****/			
			RESULT = new Nodo("integer");
			
			/**** (4). Diseno del analizdor semantico  ****/
			tipo = "integer";
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("integer",ileft,iright);
		:}
	|
	tk_boolean:b
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DECLARACIONTIPO ::= tk_boolean");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("boolean");
			
			/**** (4). Diseno del analizdor semantico  ****/
			tipo = "boolean";
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("boolean",bleft,bright);
			
		:}
	|
	error:e
		{:
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("**TIPO_ERRONEO**");
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DECLARACIONTIPO ::= error");
			parser.report_error("(SEMaNTICO) Imposible asignarle dicho tipo de dato. Solo se puede \"integer\" o \"boolean\". Linea: "+eleft+", caracter: "+eright+"\n"+parser.fallo(eleft,eright), null);
			
		:}
;

BLOQUEDESENTENCIAS ::=
	BDSA:bds
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("BLOQUEDESENTENCIAS ::= BDSA");
			
			/**** (6). Diseno del AST				   ****/
			if(bds == null)
				RESULT = new Nodo("no_sentences");
			else
				RESULT = bds;
		:}
	
;

BDSA ::=
	DEFINICIONSENTENCIA:ds BDSA:bds
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("BDSA ::= DEFINICIONSENTENCIA BDSA");
			
			/**** (6). Diseno del AST				   ****/			
			if(bds == null){
				RESULT = ds;
			}else{
				RESULT = new Nodo(ds.valor +","+ bds.valor);
				Arbol.unirHermanos(ds,bds);
			}			
		:}
	| /**/
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("BDSA ::= .");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = null;
		:}
;
		
DEFINICIONSENTENCIA ::=
	tk_skip:s tk_puntoycoma
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONSENTENCIA ::= tk_skip tk_puntoycoma");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("skip");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("skip",sleft,sright);
		:}
	|
	tk_read:r tk_identificador:i tk_puntoycoma
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONSENTENCIA ::= tk_read tk_identificador tk_puntoycoma");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("read(ide("+i.nombre+"))");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("read",rleft,rright);
			parser.ts.usada(i.nombre,ileft,iright);
			
			/**** (4). Diseno del analizdor semantico  ****/
			//Comprueba que la variable ya esta definida y que es un tipo entero para poder ser leida.
			if(parser.ts.esta(i.nombre)){
				i = parser.ts.getSimbolo(i.nombre);
				if(!i.tipo.equals("integer")){
					parser.report_error("(SEMaNTICO) "+i.nombre +" no es de tipo entero, no se puede leer. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
				}
			}else{
				parser.report_error("(SEMaNTICO) "+i.nombre +" no fue declarada. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
			}
					
		:}
	|
	tk_write:w tk_identificador:i tk_puntoycoma
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONSENTENCIA ::= tk_write tk_identificador tk_puntoycoma");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("write(ide("+i.nombre+"))");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("write",wleft,wright);
			parser.ts.usada(i.nombre,ileft,iright);
			
			/**** (4). Diseno del analizdor semantico  ****/
			//Comprueba que la variable esta definida y que haya sido inicializada para poder escribir.
			if(parser.ts.esta(i.nombre)){
				i = parser.ts.getSimbolo(i.nombre);
				if(!i.inicializada){
					parser.report_error("(SEMaNTICO) "+i.nombre +" no se puede escribir si no ha sido antes inicializada. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
				}
			}else{
				parser.report_error("(SEMaNTICO) "+i.nombre +" no fue declarada. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
			}
			
		:}
	|
	DEFINICIONIF:i
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONSENTENCIA ::= DEFINICIONIF");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = i;
		:}
	|
	tk_while:w LISTAEXPRESIONES:ls tk_do:d BLOQUEDESENTENCIAS:bds tk_end:e tk_while:w2 tk_puntoycoma
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONSENTENCIA ::= tk_while LISTAEXPRESIONES tk_do BLOQUEDESENTENCIAS tk_end tk_while tk_puntoycoma");
			
			/**** (6). Diseno del AST				   ****/	
			if(bds == null){
				bds = new Nodo("no_sentences");
			}
			RESULT = new Nodo("while("+ls.valor+",["+bds.valor+"], skip)");
			Arbol.unirHermanos(ls, bds);
			Arbol.unirParientes(RESULT, ls);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("while",wleft,wright);
			parser.ts.usada("do",dleft,dright);
			parser.ts.usada("while",w2left,w2right);
			parser.ts.usada("end",eleft,eright);
			
			/**** (4). Diseno del analizdor semantico  ****/
			ArrayList<String> vals = Compilador.sacaIDEs(ls.valor);
			//Se obtienen las variables que se estan utilizando en el bloque de sentencias y se comprueba que tenga fin.
			if(!Compilador.finWhile(vals,bds.valor)){
				parser.report_error("(SEMaNTICO) Es posible que el while definido en la linea "+wleft+", caracter: "+wright+
				" sea indefinido.\n"+parser.fallo(wleft,wright), null);
			}
		:}
	|
	tk_identificador:i tk_asignacion AVERQUEASIGNAMOS:e tk_puntoycoma
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONSENTENCIA ::= tk_identificador tk_asignacion AVERQUEASIGNAMOS tk_puntoycoma");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("asign("+i.nombre+","+e.valor+")");
			Nodo ide = new Nodo(i.nombre);
			Nodo as = new Nodo("asign");
			Arbol.unirHermanos(ide,as);
			Arbol.unirHermanos(as, e);
			Arbol.unirParientes(RESULT, ide);
			
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada(i.nombre,ileft,iright);
			
			/**** (4). Diseno del analizdor semantico  ****/
			//Comprobaciones de que lo que se encuentra a la izquierda coincide en tipo a lo de la derecha.
			String asign = e.valor;
			if(parser.ts.esta(i.nombre)){
				//Se indica que la variable ha sido inicializada.
				Simbolo si = parser.ts.getSimbolo(i.nombre);
				if(!si.inicializada){
					si.inicializada = true;
				}
				//Obtiene los identificadores de la lista de asignaciones.
				ArrayList<String> ides = Compilador.sacaIDEs(asign);
				//Y comprobamos sus tipos.
				String tipoIDEs = Compilador.tipoIDEs(parser.ts, ides);
				//Si la parte de la izquierda es de tipo entero.
				if(si.tipo.equals("integer")){
					//La parte de la derecha no puede ser de ambos tipos o solo boolean, en ese caso se muestra un mensaje de error.
					if(tipoIDEs.equals("ambos") || tipoIDEs.equals("boolean")
						|| asign.contains("true") || asign.contains("false")
						|| asign.contains("menor") || asign.contains("mayor")
						|| asign.contains("igual") || asign.contains("mayorigual")
						|| asign.contains("menorigual")){
						parser.report_error("(SEMaNTICO) "+i.nombre +" es de tipo "+si.tipo+", mientras que se le esta asignando un valor de tipo boolean"+
						". Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
					}
				}else{
					//Si no es entero, solo puede ser booleano y debe coincidir con este.
					//En cuanto no se encuentre ninguna de estas cadenas ni sea de tipo booleano,
					//entonces no coinciden los tipos.
					if(!asign.contains("true") && !asign.contains("false") && !asign.contains("not") && !tipoIDEs.equals("boolean") &&
						!asign.contains("menor") &&	!asign.contains("menorigual") &&!asign.contains("igual") &&!asign.contains("mayorigual") &&!asign.contains("mayor")){
							parser.report_error("(SEMaNTICO) "+i.nombre +" es de tipo "+si.tipo+", mientras que se le esta asignando un valor de tipo entero"+
							". Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
					}
				}
			}else{
				//Si la variable no esta declarada se avisa.
				parser.report_error("(SEMaNTICO) "+i.nombre +" no fue declarada. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
			}
			
		:}
	|
	error:e
		{:
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("**SENTENCIA_ERRONEA**");
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONSENTENCIA ::= error");
			parser.report_error("(SINTaCTICO) Problema en la sentencia de la linea "+eleft+", columna "+eright+"\n"+parser.fallo(eleft,eright), e);
		:}
;

DEFINICIONIF ::=
	tk_if:i LISTAEXPRESIONES:le tk_then:t BLOQUEDESENTENCIAS:bds DEFINICIONELSE:de tk_end:e tk_if:i2 tk_puntoycoma
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONIF ::= tk_if LISTAEXPRESIONES tk_then BLOQUEDESENTENCIAS DEFINICIONELSE tk_end tk_if tk_puntoycoma");

			/**** (6). Diseno del AST				   ****/	
			if(de == null){
				RESULT = new Nodo("if("+le.valor+",["+bds.valor+"])");
			}else{
				RESULT = new Nodo("if("+le.valor+",["+bds.valor+"],else["+de.valor+"])");
				Arbol.unirHermanos(bds, de);
			}
			Arbol.unirHermanos(le, bds);
			Arbol.unirParientes(RESULT, le);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("if",ileft,iright);
			parser.ts.usada("if",i2left,i2right);
			parser.ts.usada("end",eleft,eright);
			parser.ts.usada("then",tleft,tright);
		:}
;
		
DEFINICIONELSE ::=
	tk_else:e BLOQUEDESENTENCIAS:bds
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONELSE ::= tk_else BLOQUEDESENTENCIAS");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo(bds.valor);
			Arbol.unirParientes(RESULT, bds);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("else",eleft,eright);
			
		:}
	| /**/
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("DEFINICIONELSE ::= .");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = null;
		:}
;

LISTAEXPRESIONES ::=
	EXPRESIONBOOLEANA:eb EAA:e
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LISTAEXPRESIONES ::= EXPRESIONBOOLEANA EAA");
			
			/**** (6). Diseno del AST				   ****/
			if(e == null){
				RESULT = new Nodo(eb.valor);
			}else{
				RESULT = new Nodo(eb.valor +","+ e.valor);
				Arbol.unirHermanos(eb,e);
			}
			Arbol.unirParientes(RESULT,eb);			
		:}
;

EAA ::=
	SIGUEEXPRESION:se EXPRESIONBOOLEANA:eb EAA:e
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("EAA ::= SIGUEEXPRESION EXPRESIONBOOLEANA EAA");
			
			/**** (6). Diseno del AST				   ****/
			Arbol.unirHermanos(se, eb);
			if(e == null)
				RESULT = new Nodo(" "+se.valor+" "+eb.valor);
			else{
				RESULT = new Nodo(" "+se.valor+" "+eb.valor+e.valor);
				Arbol.unirHermanos(eb, e);
			}
			Arbol.unirHermanos(RESULT, se);
		:}
	| /**/
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("EAA ::= .");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = null;
		:}
;

SIGUEEXPRESION ::=
	tk_and:a
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("SIGUEEXPRESION ::= tk_and");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("and");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("and",aleft,aright);
		:}
		%prec tk_or
		
	|
	tk_or:o
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("SIGUEEXPRESION ::= tk_or");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("or");

			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("or",oleft,oright);
		:}
;

EXPRESIONBOOLEANA ::=
	tk_parenizq LISTAEXPRESIONES:l tk_parender
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("EXPRESIONBOOLEANA ::= tk_parenizq LISTAEXPRESIONES tk_parender");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo(l.valor);
			Arbol.unirParientes(RESULT, l);
		:}
	|
	COMPARACION:c
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("EXPRESIONBOOLEANA ::= COMPARACION");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo(c.valor);
			Arbol.unirParientes(RESULT, c);
		:}
	|
	tk_not:n tk_parenizq LISTAEXPRESIONES:l tk_parender
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("EXPRESIONBOOLEANA ::= tk_not tk_parenizq LISTAEXPRESIONES tk_parender");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("not("+l.valor+")");
			Nodo not = new Nodo("not");
			Arbol.unirHermanos(not, l);
			Arbol.unirParientes(RESULT, not);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("not",nleft,nright);
		:}
	|
	error:e
		{:
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("**EXPRESION_BOOLEANA_ERRORONEA**");
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("EXPRESIONBOOLEANA ::= error");
			parser.report_error("(SINTaCTICO) La expresion booleana de la linea "+eleft+", columna "+eright+" no esta bien definida"+"\n"+parser.fallo(eleft,eright), e);
		:}
;
		
COMPARACION ::=
	tk_identificador:i tk_comparacion:c tk_numeroentero:e
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("COMPARACION ::= tk_identificador tk_comparacion tk_numeroentero");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("exp("+c+",ide("+i.nombre+"),num("+e.toString()+"))");
			Nodo ide = new Nodo(i.nombre);
			Nodo com = new Nodo(c);
			Nodo num = new Nodo("num"+e.toString()+")");
			Arbol.unirHermanos(ide, com);
			Arbol.unirHermanos(com, num);
			Arbol.unirParientes(RESULT, ide);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada(i.nombre,ileft,iright);
			
			/**** (4). Diseno del analizdor semantico  ****/
			if(parser.ts.esta(i.nombre)){
				//Se comprueba que la comparacion de un entero sea con un identificador de tipo entero.
				Simbolo si = parser.ts.getSimbolo(i.nombre);
				if(!si.tipo.equals("integer")){
					parser.report_error("(SEMaNTICO) "+si.nombre +" no es de tipo entero. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
				}
			}else{
				//Si no esta declarada la variable se avisa.
				parser.report_error("(SEMaNTICO) "+i.nombre +" no fue declarada. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
			}
			
		:}
	|
	tk_numeroentero:e tk_comparacion:c tk_identificador:i
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("COMPARACION ::= tk_numeroentero tk_comparacion tk_identificador");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("exp("+c+",num("+e.toString()+"),ide("+i.nombre+")");
			Nodo ide = new Nodo(i.nombre);
			Nodo com = new Nodo(c);
			Nodo num = new Nodo("num("+e.toString()+")");
			Arbol.unirHermanos(num, com);
			Arbol.unirHermanos(com, ide);
			Arbol.unirParientes(RESULT, num);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada(i.nombre,ileft,iright);
			
			/**** (4). Diseno del analizdor semantico  ****/
			if(parser.ts.esta(i.nombre)){
				//De nuevo, la comparacion debe ser entre dos enteros.
				Simbolo si = parser.ts.getSimbolo(i.nombre);
				if(!si.tipo.equals("integer")){
					parser.report_error("(SEMaNTICO) "+si.nombre +" no es de tipo entero. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
				}
			}else{
				//Si no fue declarada se advierte.
				parser.report_error("(SEMaNTICO) "+i.nombre +" no fue declarada. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
			}
			
		:}
	|
	tk_identificador:i
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("COMPARACION ::= tk_identificador");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("ide("+i.nombre+")");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada(i.nombre,ileft,iright);
			
			/**** (4). Diseno del analizdor semantico  ****/
			if(parser.ts.esta(i.nombre)){
				Simbolo si = parser.ts.getSimbolo(i.nombre);
				//La comparacion solo puede ser con un identificador booleano para que solo de true o false.
				if(!si.tipo.equals("boolean")){
					parser.report_error("(SEMaNTICO) "+si.nombre +" no es de tipo booleano. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
				}
			}else{
				//Si la variable no fue declarada
				parser.report_error("(SEMaNTICO) "+i.nombre +" no fue declarada. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
			}
		:}
	|
	tk_true:t
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("COMPARACION ::= tk_true");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("true");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("true",tleft,tright);
		:}
	|
	tk_identificador:i1 tk_comparacion:c tk_identificador:i2
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("COMPARACION ::= tk_identificador tk_comparacion tk_identificador");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("exp("+c+",ide("+i1.nombre+"),ide("+i2.nombre+"))");
			Nodo ide1 = new Nodo(i1.nombre);
			Nodo ide2 = new Nodo(i2.nombre);
			Nodo com = new Nodo(c);
			Arbol.unirHermanos(ide1, com);
			Arbol.unirHermanos(com, ide2);
			Arbol.unirParientes(RESULT, ide1);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada(i1.nombre,i1left,i1right);
			parser.ts.usada(i2.nombre,i2left,i2right);
			
			/**** (4). Diseno del analizdor semantico  ****/
			boolean estan = true;
			if(!parser.ts.esta(i1.nombre)){
				//Si no esta declarada la variable se avisa.
				parser.report_error("(SEMaNTICO) "+i1.nombre +" no fue declarada. Linea: "+i1left+", caracter: "+i1right+"\n"+parser.fallo(i1left,i1right), null);
				estan = false;
			}
			if(!parser.ts.esta(i2.nombre)){
				//Si no esta declarada la variable se avisa.
				parser.report_error("(SEMaNTICO) "+i2.nombre +" no fue declarada. Linea: "+i2left+", caracter: "+i2right+"\n"+parser.fallo(i2left,i2right), null);
				estan = false;
			}
			if(estan){
				Simbolo si1 = parser.ts.getSimbolo(i1.nombre);
				Simbolo si2 = parser.ts.getSimbolo(i2.nombre);
				if(!si1.tipo.equals(si2.tipo)){
					parser.report_error("(SEMaNTICO) "+si1.nombre +" y "+si2.nombre+" no son del mismo tipo. Linea: "+i1left+", caracter: "+i1right+"\n"+parser.fallo(i1left,i1right), null);
				}
			}
			
		:}
	
		
;
		
AVERQUEASIGNAMOS ::=
	tk_true:t
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("AVERQUEASIGNAMOS ::= tk_true");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("true");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("true",tleft,tright);
		:}
	|
	tk_false:f
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("AVERQUEASIGNAMOS ::= tk_false");
			
			/**** (6). Diseno del AST				   ****/	
			RESULT = new Nodo("false");
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("false",fleft,fright);
		:}
	|
	IDEOENTERO:ie LISTADEASIGNACIONES:la
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("AVERQUEASIGNAMOS ::= IDEOENTERO LISTADEASIGNACIONES");
			
			/**** (6). Diseno del AST				   ****/
			if(la == null){
				RESULT = new Nodo(ie);
			}else{
				String ioe = "";
				//Comprobamos que lo que ha devuelto IDEOENTERO sea un numero o un identificador.
				if(Compilador.isNumeric(ie.valor)){
					ioe = "num("+ie.valor+")";				
				}else{
					ioe = "ide("+ie.valor+")";
				}
				RESULT = new Nodo("exp("+ioe+","+la.valor+")");
				Arbol.unirHermanos(ie, la);
			}
			Arbol.unirParientes(RESULT, ie);
		:}
	|
	tk_not:n tk_parenizq LISTAEXPRESIONES:le tk_parender
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("AVERQUEASIGNAMOS ::= tk_not tk_parenizq LISTAEXPRESIONES tk_parender");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("not("+le.valor+")");
			Nodo not = new Nodo("not");
			Arbol.unirHermanos(not,le);
			Arbol.unirParientes(RESULT, not);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada("not",nleft,nright);
		:}
	|
	tk_parenizq LISTAEXPRESIONES:le tk_parender
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("AVERQUEASIGNAMOS ::= tk_parenizq LISTAEXPRESIONES tk_parender");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo(le.valor);
			Arbol.unirParientes(RESULT, le);
		:}
;

LISTADEASIGNACIONES ::=
	OPERADORMATES:op IDEOENTERO:i LISTADEASIGNACIONES:la
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LISTADEASIGNACIONES ::= OPERADORMATES IDEOENTERO LISTADEASIGNACIONES");
			
			/**** (6). Diseno del AST				   ****/
			Nodo oper = new Nodo(op.valor);
			String ioe = "";
			if(Compilador.isNumeric(i.valor)){
				ioe = "num("+i.valor+")";				
			}else{
				ioe = "ide("+i.valor+")";
			}
			Nodo ie = new Nodo(ioe);
			Arbol.unirHermanos(oper,ie);
			if(la == null){
				RESULT = new Nodo(op.valor+","+ioe);
			}else{
				RESULT = new Nodo(op.valor+","+ioe+","+la.valor);
				Arbol.unirHermanos(ie, la);
			}
			Arbol.unirParientes(RESULT, oper);
			
			/**** (4). Diseno del analizdor semantico  ****/
			//Si IDEOENTERO es un identificador
			if(ioe.contains("ide")){
				//se saca la lista de identificadores de la actual lista de asignaciones.
				ArrayList<String> ides = Compilador.sacaIDEs(RESULT.valor);
				//Si no esta vacia
				if(!ides.isEmpty()){
					//Se coge el primer ide. (puesto que si existieran mas, las comprobarian
					//las diferentes sucesiones de esta produccion.
					String ide = ides.get(0);
					//Y se comprueba que fuera declarada.
					if(!parser.ts.esta(ide)){
						parser.report_error("(SEMaNTICO) "+ide +" no fue declarada. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
					}
				}
			}
			//Se comprueba que no se este dividiendo entre cero.
			boolean divisioncero = false;
			//Si la operacion es entre.
			if(op.valor.equals("entre")){
				//Y el valor de IDEOENTERO es el numero 0, sera un error.
				if(ioe.equals("num(0)")){
					divisioncero = true;
				}else{
					//Sino, se comprueba si el ide esta inicializado siempre que este en la tabla de simbolos
					if(parser.ts.esta(i.valor)){
						//y ademas sea de tipo entero.
						Simbolo s = parser.ts.getSimbolo(i.valor);
						if(!s.inicializada && s.tipo.equals("integer")){
							divisioncero = true;
						}
					}
					//La comprobacion de si no esta declarada ya fue lineas atras.
				}
			}
			//Si se ha comprobado que habra una division entre cero se muestra el error.
			if(divisioncero){
				parser.report_error("(SEMaNTICO) Se esta intentando dividir entre 0. Linea: "+ileft+", caracter: "+iright+"\n"+parser.fallo(ileft,iright), null);
			}
			
		:}
	| /**/
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LISTADEASIGNACIONES ::= .");

			/**** (6). Diseno del AST				   ****/
			RESULT = null;
		:}
	|
	error:e
		{:
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("**LISTA_ASIGNACIONES_ERRONEA**");
			
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("LISTADEASIGNACIONES ::= error");
			parser.report_error("(SINTaCTICO) Asignacion mal definida en la linea: "+eleft+", caracter: "+eright+"\n"+parser.fallo(eleft,eright), null);
		:}
;
		
OPERADORMATES ::=
	tk_suma
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("OPERADORMATES ::= tk_suma");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("mas");
		:}
	|
	tk_resta
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("OPERADORMATES ::= tk_resta");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("menos");
		:}
		%prec tk_suma
		
	|
	tk_multiplicacion
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("OPERADORMATES ::= tk_multiplicacion");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("por");
		:}
	|
	tk_division
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("OPERADORMATES ::= tk_division");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo("entre");
		:}
		%prec tk_multiplicacion
		
;
		
IDEOENTERO ::=
	tk_identificador:i
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("IDEOENTERO ::= tk_identificador");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo(i.nombre);
			
			/**** (5). Diseno de la tabla de simbolos ****/
			parser.ts.usada(i.nombre,ileft,iright);
		:}
	|
	tk_numeroentero:e
		{:
			/**** (3). Diseno del analizdor sintactico ****/
			newProduccion("IDEOENTERO ::= tk_numeroentero");
			
			/**** (6). Diseno del AST				   ****/
			RESULT = new Nodo(e.toString());
		:}
;